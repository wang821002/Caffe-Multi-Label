#include <vector>

#include "caffe/layers/weighted_sigmoid_cross_entropy_loss_layer.hpp"
#include "caffe/util/math_functions.hpp"

namespace caffe {

template <typename Dtype>
void WeightedSigmoidCrossEntropyLossLayer<Dtype>::Backward_gpu(
    const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down,
    const vector<Blob<Dtype>*>& bottom) {
  if (propagate_down[1]) {
    LOG(FATAL) << this->type()
               << " Layer cannot backpropagate to label inputs.";
  }
  if (propagate_down[0]) {
//    // First, compute the diff
//    const int count = bottom[0]->count();
//    const int num = bottom[0]->num();
//    const Dtype* sigmoid_output_data = sigmoid_output_->gpu_data();
//    const Dtype* target = bottom[1]->gpu_data();
//    Dtype* bottom_diff = bottom[0]->mutable_gpu_diff();
//    caffe_copy(count, sigmoid_output_data, bottom_diff);
//    caffe_gpu_axpy(count, Dtype(-1), target, bottom_diff);
//    // Scale down gradient
//    const Dtype loss_weight = top[0]->cpu_diff()[0];
//   caffe_gpu_scal(count, loss_weight / num, bottom_diff);

    // First, compute the diff
    const int count = bottom[0]->count();
    const int num = bottom[0]->num();
    const Dtype* sigmoid_output_data = sigmoid_output_->gpu_data();
    const Dtype* target = bottom[1]->gpu_data();
    Dtype* bottom_diff = bottom[0]->mutable_gpu_diff();
    caffe_copy(count, sigmoid_output_data, bottom_diff);
    caffe_gpu_axpy(count, Dtype(-1), target, bottom_diff);
    Dtype count_pos = 0;
    Dtype count_neg = 0;
    int dim = bottom[0]->count() / bottom[0]->num();

    for (int i = 0; i < num; ++i) {
    	count_pos = 0;
    	count_neg = 0;
    	for (int j = 0; j < dim; j ++) {
           	if (target[i*dim+j] > 0.0001) {
                	count_pos ++;
        	}
        	else if (target[i*dim+j] <0.0001) {
                	count_neg ++;
        	}
     	}
    	for (int j = 0; j < dim; j ++) {
        	if (target[i*dim+j] > 0.0001) {
               		bottom_diff[i * dim + j] *= 1 * count_neg / (count_pos + count_neg);
        	}
        	else if (target[i*dim+j] <0.0001) {
                	bottom_diff[i * dim + j] *= count_pos / (count_pos + count_neg);
        	}
     	}
    }
    const Dtype loss_weight = top [0]->cpu_diff()[0];
    caffe_gpu_scal(count, loss_weight / num, bottom_diff);
  }
}

INSTANTIATE_LAYER_GPU_BACKWARD(WeightedSigmoidCrossEntropyLossLayer);


}  // namespace caffe
